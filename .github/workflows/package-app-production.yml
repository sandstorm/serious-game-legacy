name: Package App Production

on:
  # manual triggering - currently disabled
  #workflow_dispatch: {}
  push:
    tags:
      - '*'

jobs:
  build_assets:
    name: Build Assets
    runs-on: [self-hosted, linux]
    container:
      image: docker-hub.sandstorm.de/docker-infrastructure/php-app/build:8.4-v4
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Cache composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: app/.composer-cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Cache yarn/node dependencies
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
        working-directory: ./app

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      # Install PHP dependencies
      - name: Install Composer dependencies
        run: |
          COMPOSER_CACHE_DIR=.composer-cache composer install --ignore-platform-reqs
        working-directory: ./app

        # Uncomment if you need Font Awesome
        # - name: Configure npm for Font Awesome
        #   run: |
        #     npm config set "@fortawesome:registry" https://npm.fontawesome.com/
        #     npm config set "//npm.fontawesome.com/:_authToken" ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
        #   working-directory: ./app

      # Install Node.js dependencies and build
      - name: Install Yarn dependencies
        run: yarn
        working-directory: ./app

      - name: Build assets
        run: yarn build
        working-directory: ./app

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-assets
          path: app/public/build/
          retention-days: 7

  package_app_production:
    name: Package App Production
    runs-on: [self-hosted, linux]
    container:
      image: docker-hub.sandstorm.de/docker-infrastructure/php-app/build:8.4-v4
    needs: build_assets
    permissions:
      contents: read
      packages: write    # This is critical for GHCR access

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download build artifacts from previous job
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-assets
          path: app/public/build/

      # Cache composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: app/.composer-cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Install PHP dependencies including dev dependencies
      - name: Install Composer dependencies
        run: |
          cd app
          COMPOSER_CACHE_DIR=.composer-cache composer install --no-dev --ignore-platform-reqs
          cd ..

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with: # allow using host docker
          driver: docker-container
          buildkitd-flags: --allow-insecure-entitlement security.insecure

    # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CI_REGISTRY || 'ghcr.io' }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deployment/production/Dockerfile
          push: true
          tags: ${{ vars.CI_REGISTRY_IMAGE || format('ghcr.io/{0}', github.repository) }}/laravel:${{ github.ref_name }}

          # local cache
          cache-from: type=registry,ref=${{ vars.CI_REGISTRY_IMAGE || format('ghcr.io/{0}', github.repository) }}/cache:latest
          cache-to: type=registry,ref=${{ vars.CI_REGISTRY_IMAGE || format('ghcr.io/{0}', github.repository) }}/cache:latest,mode=max

  deploy_production:
    name: Deploy to Production
    runs-on: [self-hosted, linux]
    needs: package_app_production
    environment: production
    container:
      image: docker-hub.sandstorm.de/docker-infrastructure/php-app/build:8.4-v4

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production Server
        run: |
          eval $(ssh-agent -s)
          bash -c 'ssh-add <(echo "${{ secrets.PROD_DEPLOYMENT_KEY}} ")'
          mkdir -p /root/.ssh
          chmod 700 /root/.ssh
          echo "${{ vars.PROD_KNOWN_HOSTS }}" > /root/.ssh/known_hosts
          cat /root/.ssh/known_hosts
          chmod 600 /root/.ssh/known_hosts
          echo "Host ${{ vars.PROD_SERVER_DOMAIN }}" >> /root/.ssh/config
          echo "    User deployment" >> /root/.ssh/config
          echo "    Port ${{ vars.PROD_SSH_PORT }}" >> /root/.ssh/config
          echo "    ConnectTimeout 5" >> /root/.ssh/config
          chmod 600 /root/.ssh/config
          cat /root/.ssh/config
          ssh ${{ vars.PROD_SERVER_DOMAIN }} echo ssh connection working!

          echo "Finished ssh setup, going to deploy to production now!"
          scp deployment/production/docker-compose.yml ${{ vars.PROD_SERVER_DOMAIN }}:deployments/serious-game/
          scp deployment/production/Caddyfile ${{ vars.PROD_SERVER_DOMAIN }}:deployments/serious-game/caddy_files

          echo "copied all files to prod server, applying changes now!"
          ssh ${{ vars.PROD_SERVER_DOMAIN }} <<-EOF
          set -ex
          cd deployments/serious-game
          sed -i "s/^IMAGE_TAG='[^']*'/IMAGE_TAG='${{ github.ref_name }}'/" .env
          docker compose pull
          docker compose up -d
          docker compose exec -w /etc/caddy caddy caddy reload
          EOF
