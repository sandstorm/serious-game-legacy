<?php

namespace App\Livewire;

use Archilex\AdvancedTables\AdvancedTables;
use Archilex\AdvancedTables\Enums\Status;
use Archilex\AdvancedTables\Filters\UserSelectFilter;
use Archilex\AdvancedTables\Livewire\Page;
use Archilex\AdvancedTables\Models\UserView;
use Archilex\AdvancedTables\Support\Authorize;
use Archilex\AdvancedTables\Support\Config;
use Archilex\ToggleIconColumn\Columns\ToggleIconColumn;
use Filament\Tables\Actions\Action;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Filters\TernaryFilter;
use Filament\Tables\Grouping\Group;
use Filament\Tables\Table;
use Illuminate\Contracts\View\View;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;
use Livewire\Attributes\Url;

class ListUserViews extends Page
{
    use AdvancedTables;

    /**
     * @var array<string, mixed> | null
     */
    #[Url]
    public ?array $tableFilters = null;

    #[Url]
    public ?string $tableGrouping = null;

    #[Url]
    public ?string $tableGroupingDirection = null;

    /**
     * @var ?string
     */
    #[Url]
    public $tableSearch = '';

    #[Url]
    public ?string $tableSortColumn = null;

    #[Url]
    public ?string $tableSortDirection = null;

    public static function getPluralModelLabel(): string
    {
        return 'User views';
    }

    public function table(Table $table): Table
    {
        return $table
            ->query(UserView::query())
            ->columns([
                TextColumn::make('name')
                    ->label(__('advanced-tables::advanced-tables.tables.columns.name'))
                    ->description(fn (Model $record) => $record->resource_name)
                    ->searchable()
                    ->sortable()
                    ->toggleable(),
                IconColumn::make('icon')
                    ->label(__('advanced-tables::advanced-tables.tables.columns.icon'))
                    ->icons(fn (Model $record) => $record->icon ? [$record->icon => $record->icon] : [])
                    ->size('md')
                    ->alignCenter()
                    ->sortable()
                    ->toggleable(),
                TextColumn::make('status')
                    ->badge()
                    ->sortable()
                    ->toggleable(),
                TextColumn::make('user.' . Config::getUserTableNameColumn())
                    ->label(__('advanced-tables::advanced-tables.tables.columns.user'))
                    ->sortable()
                    ->searchable()
                    ->toggleable(),
                TextColumn::make('resource')
                    ->label(__('advanced-tables::advanced-tables.tables.columns.resource'))
                    ->searchable(['resource'])
                    ->sortable(['resource'])
                    ->toggleable(isToggledHiddenByDefault: true),
                TextColumn::make('indicators')
                    ->badge()
                    ->label(__('advanced-tables::advanced-tables.tables.columns.filters'))
                    ->toggleable(isToggledHiddenByDefault: true),
                ToggleIconColumn::make('is_public')
                    ->label(__('advanced-tables::advanced-tables.tables.columns.is_public'))
                    ->size('md')
                    ->onIcon('heroicon-s-eye')
                    ->offIcon('heroicon-o-eye-slash')
                    ->onColor('primary')
                    ->offColor('secondary')
                    ->disabled(fn (Model $record) => ! Authorize::canPerformAction('update', $record))
                    ->alignCenter()
                    ->tooltip(fn (Model $record) => Authorize::canPerformAction('update', $record) ? ($record->is_public ? __('advanced-tables::advanced-tables.tables.tooltips.is_public.make_private') : __('advanced-tables::advanced-tables.tables.tooltips.is_public.make_public')) : false)
                    ->sortable(),
                ToggleIconColumn::make('is_global_favorite')
                    ->label(__('advanced-tables::advanced-tables.tables.columns.is_global_favorite'))
                    ->size('md')
                    ->onIcon('heroicon-s-globe-alt')
                    ->offIcon('heroicon-o-globe-alt')
                    ->onColor('primary')
                    ->offColor('secondary')
                    ->disabled(fn (Model $record) => ! Authorize::canPerformAction('update', $record))
                    ->alignCenter()
                    ->tooltip(fn (Model $record) => Authorize::canPerformAction('update', $record) ? ($record->is_global_favorite ? __('advanced-tables::advanced-tables.tables.tooltips.is_global_favorite.make_personal') : __('advanced-tables::advanced-tables.tables.tooltips.is_global_favorite.make_global')) : false)
                    ->sortable(),
            ])
            ->defaultSort('name')
            ->groups([
                'user.' . Config::getUserTableNameColumn(),
                Group::make('resource')
                    ->getTitleFromRecordUsing(fn (UserView $record): string => $record->resource_name),
            ])
            ->filters([
                UserSelectFilter::make('user_id')
                    ->label(__('advanced-tables::advanced-tables.forms.user'))
                    ->relationship('user', Config::getUserTableNameColumn())
                    ->multiple(),
                SelectFilter::make('status')
                    ->multiple()
                    ->options(Status::class),
                SelectFilter::make('resource')
                    ->label(__('advanced-tables::advanced-tables.forms.resource'))
                    ->options(
                        fn () => Config::getUserView()::query()
                            ->distinct()
                            ->pluck('resource', 'resource')
                            ->mapWithKeys(function ($value, $key) {
                                return [$key => Str::of($value::getPluralModelLabel())->ucfirst()];
                            })
                    )
                    ->indicateUsing(function (array $data) {
                        if (! $data['value']) {
                            return null;
                        }

                        return __('advanced-tables::advanced-tables.forms.resource') . ': ' . Str::of($data['value']::getPluralModelLabel())->ucfirst();
                    }),
                TernaryFilter::make('is_public')
                    ->label(__('advanced-tables::advanced-tables.forms.public.toggle_label')),
                TernaryFilter::make('is_global_favorite')
                    ->label(__('advanced-tables::advanced-tables.forms.global_favorite.toggle_label')),
            ])
            ->actions([
                ActionGroup::make([
                    ActionGroup::make([
                        EditAction::make()
                            ->slideOver(fn () => Config::showQuickSaveAsSlideOver())
                            ->modalWidth(fn () => Config::showQuickSaveAsSlideOver() ? 'md' : '4xl')
                            ->form(fn () => $this->getSaveOptionFormSchema(userViewResource: true)),
                        Action::make('approve')
                            ->label(__('advanced-tables::advanced-tables.tables.actions.buttons.approve'))
                            ->icon('heroicon-s-check-badge')
                            ->visible(fn (Model $record): bool => $record->status !== Status::Approved)
                            ->action(fn (Model $record) => $record->update(['status' => 'approved'])),
                    ])
                        ->dropdown(false),
                    DeleteAction::make(),
                ]),
            ])
            ->bulkActions([
                DeleteBulkAction::make(),
            ]);
    }

    public function render(): View
    {
        return view('livewire.list-user-views');
    }
}
