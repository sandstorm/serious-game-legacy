prototype(MyVendor.AwesomeNeosProject:Component.Image) < prototype(Neos.Fusion:Component) {
    imageSource = null
    // Needed when rendering svg or gifs
    imageUri = ''
    fileExtension = ''
    alternativeText = ''
    imageDescription = ''

    href = ''
    isExternalLink = false
    align = 'left'

    loadEager = false
    // If set to false we prevent this component from rendering a image placeholder in backend when no image is set
    showImagePlaceholder = true
    @context.contentWidth = ${this.contentWidth}
    class = ''

    // TODO: i don't understand this comment
    // The possible image sizes we are using here are determined empirically, so
    // f.e. for a 4column Blog Overview page, we need a rendering bigger than 350 px (as the breakpoint
    // is > 1400px). That's why we use the minimum size of 370 px to have some buffer here.
    // These should match Settings.Media.yaml
    srcSet = ${['370w', '600w', '800w', '1200w', '1600w']}

    // This is only for full-width images!!
    // For images displayed at smaller sizes, you MUST OVERRIDE THIS!!
    sizes = ${['100vw']}

    formats = ${['webp', 'jpg']}

    @propTypes {
        @strict = true
        imageSource = ${PropTypes.any}
        imageUri = ${PropTypes.string}
        fileExtension = ${PropTypes.string}
        alternativeText = ${PropTypes.string}
        imageDescription = ${PropTypes.string}

        href = ${PropTypes.string}
        isExternalLink = ${PropTypes.boolean}
        align = ${PropTypes.oneOf(['left', 'center', 'right'])}

        loadEager = ${PropTypes.boolean}
        showImagePlaceholder = ${PropTypes.boolean}
        class = ${PropTypes.string}

        srcSet = ${PropTypes.arrayOf(PropTypes.string)}
        sizes = ${PropTypes.arrayOf(PropTypes.string)}
        formats = ${PropTypes.arrayOf(PropTypes.string)}
    }

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        _inBackend = MyVendor.AwesomeNeosProject:Helper.InBackend

        _imageAttributes = Neos.Fusion:DataStructure {
            "href" = ${props.href ? props.href : null}
            "target" = ${props.isExternalLink ? '_blank' : null}
            "class" = ${AtomicFusion.classNames('image', 'image--' + props.align, props.class)}
        }

        renderer = Neos.Fusion:Tag {
            @if.showImage = ${props.imageSource || props.showImagePlaceholder}
            tagName = ${(props.href && !this._inBackend) ? 'a' : 'div'}
            attributes = ${props._imageAttributes}

            content = Neos.Fusion:Case {
                gifOrSvg {
                    // WORKAROUND for crashing animted gifs
                    // it seems that if you throw a big animted gif to vips it needs a lot of resources and blocks
                    // the php process for a very long time with high cpu utilization.
                    // Thats why we do not touch gifs and just output them without any processing.
                    // Also added svgs cause they need no different sizes.
                    condition = ${props.fileExtension == 'gif' || props.fileExtension == 'svg'}
                    renderer = afx`
                        <MyVendor.AwesomeNeosProject:Component.ImagePlaceholder @if.showPlaceholder={props.showImagePlaceholder && props._inBackend && !props.imageUri}/>
                        <img src={props.imageUri} alt={props.alternativeText} loading={props.loadEager ? 'eager' : 'lazy'} />
                        <MyVendor.AwesomeNeosProject:Component.Image.Description imageDescription={props.imageDescription} />
                    `
                }

                default {
                    condition = true
                    renderer = afx`
                        <MyVendor.AwesomeNeosProject:Component.ImagePlaceholder @if.showPlaceholder={props.showImagePlaceholder && props._inBackend && !props.imageSource}/>
                        <!-- we load all images lazily by default, as the browser is really good at finding what is
                        needed above the fold -->
                        <Sitegeist.Kaleidoscope:Picture
                            @if.showImage={props.imageSource}
                            alt={props.alternativeText}
                            imageSource={props.imageSource}
                            srcset={props.srcSet}
                            sizes={props.sizes}
                            formats={props.formats}
                            renderDimensionAttributes={false}
                            loading={props.loadEager ? 'eager' : 'lazy'}
                        />
                        <MyVendor.AwesomeNeosProject:Component.Image.Description imageDescription={props.imageDescription} />
                    `
                }
            }
        }
    }
}

prototype(MyVendor.AwesomeNeosProject:Component.Image.Description) < prototype(Neos.Fusion:Component) {
    imageDescription = ''
    @propTypes {
        @strict = true
        imageDescription = ${PropTypes.string}
    }

    renderer = afx`
        <span @if.imageDescription={props.imageDescription} class="image__description">{props.imageDescription}</span>
    `
}
