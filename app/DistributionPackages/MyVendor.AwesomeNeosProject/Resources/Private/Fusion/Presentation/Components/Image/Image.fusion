prototype(MyVendor.AwesomeNeosProject:Component.Image) < prototype(Neos.Fusion:Component) {
    imageSource = null
    alternativeText = ''
    imageDescription = ''
    href = ''
    isExternalLink = false
    align = 'left'
    class = 'w-full h-full flex flex-col flex-wrap mb-8'
    pictureClasses = 'inline-block h-full'
    imgClasses = 'max-w-full h-auto'

    // We load all images lazily by default, as the browser is really good at finding what is needed above the fold
    loadEager = false

    // If set to false we prevent this component from rendering a image placeholder in backend when no image is set
    showImagePlaceholder = true

    // Needed when rendering svg or gifs
    imageUri = ''
    fileExtension = ''

    // These values should match Settings.Media.yaml
    srcSet = ${['370w', '600w', '800w', '1200w', '1600w']}

    // Sizes="100vw" means the image file is swapped out based on the total width of the viewport.
    // This value is only appropriate for full-width images
    // - you should override this for images displayed at smaller sizes.
    sizes = ${['100vw']}

    formats = ${['webp', 'jpg']}

    @propTypes {
        @strict = true
        imageSource = ${PropTypes.instanceOf('\\Sitegeist\\Kaleidoscope\\Domain\\ImageSourceInterface')}
        imageUri = ${PropTypes.string}
        fileExtension = ${PropTypes.string}
        alternativeText = ${PropTypes.string}
        imageDescription = ${PropTypes.string}
        href = ${PropTypes.string}
        isExternalLink = ${PropTypes.boolean}
        align = ${PropTypes.oneOf(['left', 'center', 'right'])}
        loadEager = ${PropTypes.boolean}
        showImagePlaceholder = ${PropTypes.boolean}
        class = ${PropTypes.string}
        pictureClasses = ${PropTypes.string}
        imgClasses = ${PropTypes.string}
        srcSet = ${PropTypes.arrayOf(PropTypes.string)}
        sizes = ${PropTypes.arrayOf(PropTypes.string)}
        formats = ${PropTypes.arrayOf(PropTypes.string)}
    }

    @private {
        inBackend = MyVendor.AwesomeNeosProject:Helper.InBackend
    }

    renderer = Neos.Fusion:Tag {
        @if.showImage = ${props.imageSource || props.showImagePlaceholder}

        tagName = ${(props.href && !private.inBackend) ? 'a' : 'div'}
        attributes.href = ${props.href ? props.href : null}
        attributes.target = ${props.isExternalLink ? '_blank' : null}
        attributes.class = ${AtomicFusion.classNames(
            props.class,
            {
                'no-underline': props.href && !private.inBackend,
                'items-start': props.align == 'left',
                'items-center': props.align == 'center',
                'items-end': props.align == 'right'
            }
        )}

        content = Neos.Fusion:Case {
            gifOrSvg {
                // WORKAROUND for crashing animated gifs:
                // It seems that if you throw a big animated gif to vips it needs a lot of resources and blocks
                // the php process for a very long time with high cpu utilization.
                // Thats why we do not touch gifs and just output them without any processing.
                // Also added svgs cause they need no different sizes.
                condition = ${props.fileExtension == 'gif' || props.fileExtension == 'svg'}
                renderer = afx`
                    <MyVendor.AwesomeNeosProject:Component.ImagePlaceholder
                        @if.showPlaceholder={props.showImagePlaceholder && private.inBackend && !props.imageUri}
                    />
                    <img
                        src={props.imageUri}
                        alt={props.alternativeText}
                        loading={props.loadEager ? 'eager' : 'lazy'}
                        class={props.imgClasses}
                    />
                    <MyVendor.AwesomeNeosProject:Component.Image.Description
                        imageDescription={props.imageDescription}
                    />
                `
            }

            default {
                condition = true
                renderer = afx`
                    <MyVendor.AwesomeNeosProject:Component.ImagePlaceholder
                        @if.showPlaceholder={props.showImagePlaceholder && private.inBackend && !props.imageSource}
                    />
                    <Sitegeist.Kaleidoscope:Picture
                        @if.showImage={props.imageSource}
                        alt={props.alternativeText}
                        imageSource={props.imageSource}
                        srcset={props.srcSet}
                        sizes={props.sizes}
                        formats={props.formats}
                        renderDimensionAttributes={false}
                        loading={props.loadEager ? 'eager' : 'lazy'}
                        attributes.class={props.pictureClasses}
                        imgAttributes.class={props.imgClasses}
                    />
                    <MyVendor.AwesomeNeosProject:Component.Image.Description
                        imageDescription={props.imageDescription}
                    />
                `
            }
        }
    }
}
