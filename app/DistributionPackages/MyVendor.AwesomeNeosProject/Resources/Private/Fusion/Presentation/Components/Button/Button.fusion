prototype(MyVendor.AwesomeNeosProject:Component.Button) < prototype(Neos.Fusion:Component) {
    title = ''
    href = ''
    isExternalLink = false
    type = ''
    align = 'left'
    icon = ''
    iconAlignment = 'left'
    additionalClasses = ''
    additionalAttributes = ''
    withButtonWrapper = true

    @propTypes {
        @strict = true
        title = ${PropTypes.string}
        href = ${PropTypes.string}
        isExternalLink = ${PropTypes.boolean}
        type = ${PropTypes.oneOf(['primary', 'secondary', 'outline', 'link'])}
        align = ${PropTypes.oneOf(['left', 'center', 'right'])}
        icon = ${PropTypes.string}
        iconAlignment = ${PropTypes.oneOf(['left', 'right'])}
        additionalClasses = ${PropTypes.string} // DataStructure
        additionalAttributes = ${PropTypes.any} // DataStructure
        withButtonWrapper = ${PropTypes.boolean}
    }

    @private {
        inBackend = MyVendor.AwesomeNeosProject:Helper.InBackend
        buttonClasses = ${AtomicFusion.classNames(
            'flex items-center no-underline cursor-pointer transition focus:outline focus:outline-primary-main',
            {
                'h-8 py-0 px-4 justify-center text-sm whitespace-nowrap overflow-hidden border': props.type == 'primary' || props.type == 'secondary' || props.type == 'outline',
                'border-primary-main bg-primary-main text-white hover:text-white hover:border-primary-dark hover:bg-primary-dark focus:text-white focus:border-primary-dark focus:bg-primary-dark active:text-white active:border-black active:bg-black': props.type == 'primary',
                'border-grey-main bg-grey-main text-white hover:text-white hover:border-grey-dark hover:bg-grey-dark focus:text-white focus:border-grey-dark focus:bg-grey-dark active:text-white active:border-black active:bg-black': props.type == 'secondary',
                'border-primary-main bg-white text-primary-main hover:border-primary-dark hover:text-primary-dark focus:border-primary-dark focus:text-primary-dark active:border-black active:text-black': props.type == 'outline',
                'text-left text-primary-main hover:text-primary-dark focus:text-primary-dark active:text-primary-dark': props.type == 'link',
                'gap-2': props.icon,
                'flex-row-reverse': props.icon && props.iconAlignment == 'right'
            },
            props.additionalClasses
        )}
    }

    renderer = afx`
        <MyVendor.AwesomeNeosProject:Component.Button.ButtonWrapper align={props.align} @if={props.withButtonWrapper}>
            <MyVendor.AwesomeNeosProject:Component.Button.Button
                    @if={!props.href}
                    title={props.title}
                    icon={props.icon}
                    iconAlignment={props.iconAlignment}
                    classes={private.buttonClasses}
                    additionalAttributes={props.additionalAttributes}
                    isTypeLink={props.type == 'link'}
            />

            <MyVendor.AwesomeNeosProject:Component.Button.Link
                @if={props.href}
                title={props.title}
                href={props.href}
                isExternalLink={props.isExternalLink}
                icon={props.icon}
                iconAlignment={props.iconAlignment}
                classes={private.buttonClasses}
                isTypeLink={props.type == 'link'}
            />
        </MyVendor.AwesomeNeosProject:Component.Button.ButtonWrapper>
        <MyVendor.AwesomeNeosProject:Component.Button.Button
                @if={!props.href && !props.withButtonWrapper}
                title={props.title}
                icon={props.icon}
                iconAlignment={props.iconAlignment}
                classes={private.buttonClasses}
                additionalAttributes={props.additionalAttributes}
                isTypeLink={props.type == 'link'}
        />

        <MyVendor.AwesomeNeosProject:Component.Button.Link
            @if={props.href && !props.withButtonWrapper}
            title={props.title}
            href={props.href}
            isExternalLink={props.isExternalLink}
            icon={props.icon}
            iconAlignment={props.iconAlignment}
            classes={private.buttonClasses}
            isTypeLink={props.type == 'link'}
        />
    `
}
