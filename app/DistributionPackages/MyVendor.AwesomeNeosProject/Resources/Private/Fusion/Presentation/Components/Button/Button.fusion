prototype(MyVendor.AwesomeNeosProject:Component.Button) < prototype(Neos.Fusion:Component) {
    title = ''
    href = ''
    isExternalLink = false
    type = ''
    align = 'left'
    icon = ''
    iconAlignment = 'left'
    additionalClasses = ''
    additionalAttributes = ''
    withButtonWrapper = true

    @propTypes {
        @strict = true
        title = ${PropTypes.string}
        href = ${PropTypes.string}
        isExternalLink = ${PropTypes.boolean}
        type = ${PropTypes.oneOf(['primary', 'secondary', 'outline', 'link'])}
        align = ${PropTypes.oneOf(['left', 'center', 'right'])}
        icon = ${PropTypes.string}
        iconAlignment = ${PropTypes.oneOf(['left', 'right'])}
        additionalClasses = ${PropTypes.string}
        additionalAttributes = ${PropTypes.any} // DataStructure
        withButtonWrapper = ${PropTypes.boolean}
    }

    @private {
        inBackend = MyVendor.AwesomeNeosProject:Helper.InBackend
        primarySolidOutlineClasses = 'h-8 py-0 px-4 justify-center text-sm whitespace-nowrap overflow-hidden border'
        buttonClasses = Neos.Fusion:Join {
            defaultClassesForEveryButton = 'flex items-center cursor-pointer transition focus:outline focus:outline-offset-2 focus:outline-primary-main'
            buttonTypeClasses = Neos.Fusion:Case {
                primary {
                    condition = ${props.type == 'primary'}
                    renderer = ${private.primarySolidOutlineClasses + ' border-primary-main bg-primary-main text-white hover:text-white hover:border-primary-dark hover:bg-primary-dark focus:text-white focus:border-primary-dark focus:bg-primary-dark active:text-white active:border-black active:bg-black'}
                }
                secondary {
                    condition = ${props.type == 'secondary'}
                    renderer = ${private.primarySolidOutlineClasses + ' border-grey-main bg-grey-main text-white hover:text-white hover:border-grey-dark hover:bg-grey-dark focus:text-white focus:border-grey-dark focus:bg-grey-dark active:text-white active:border-black active:bg-black'}
                }
                outline {
                    condition = ${props.type == 'outline'}
                    renderer = ${private.primarySolidOutlineClasses + ' border-primary-main bg-white text-primary-main hover:border-primary-dark hover:text-primary-dark focus:border-primary-dark focus:text-primary-dark active:border-black active:text-black'}
                }
                link {
                    condition = ${props.type == 'link'}
                    renderer = 'text-left text-primary-main hover:text-primary-dark focus:text-primary-dark active:text-primary-dark'
                }
            }
            icon = ${props.icon ? 'gap-2' : ''}
            iconReverse = ${props.icon && props.iconAlignment == 'right' ? 'flex-row-reverse' : ''}
            additionalClasses = ${props.additionalClasses}
            @glue = ' '
        }

        buttonComponent = Neos.Fusion:Case {
            button {
                condition = ${!props.href}
                renderer = afx`<MyVendor.AwesomeNeosProject:Component.Button.Button
                    title={props.title}
                    icon={props.icon}
                    classes={private.buttonClasses}
                    additionalAttributes={props.additionalAttributes}
                    isTypeLink={props.type == 'link'}
                />`
            }

            link {
                condition = ${props.href}
                renderer = afx`<MyVendor.AwesomeNeosProject:Component.Button.Link
                    title={props.title}
                    href={props.href}
                    isExternalLink={props.isExternalLink}
                    icon={props.icon}
                    classes={private.buttonClasses}
                    isTypeLink={props.type == 'link'}
                />`
            }
        }
    }

    renderer = Neos.Fusion:Case {
        withWrapper {
            condition = ${props.withButtonWrapper}
            renderer = afx`
                <MyVendor.AwesomeNeosProject:Component.Button.ButtonWrapper align={props.align}>
                    {private.buttonComponent}
                </MyVendor.AwesomeNeosProject:Component.Button.ButtonWrapper>
            `
        }

        default {
            condition = ${true}
            renderer = ${private.buttonComponent}
        }
    }
}
