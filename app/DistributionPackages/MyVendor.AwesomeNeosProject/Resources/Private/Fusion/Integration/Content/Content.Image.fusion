// Integration component for the image node type
prototype(MyVendor.AwesomeNeosProject:Content.Image) < prototype(Neos.Neos:ContentComponent) {
    renderer = MyVendor.AwesomeNeosProject:Component.Image {
        image = MyVendor.AwesomeNeosProject:Content.Image.Only

        href = ${q(node).property('link')}
        href.@process.convert = Neos.Neos:ConvertUris
        isExternalLink = ${q(node).property('isExternalLink')}
        align = ${q(node).property('align')}

        imageDescription = ${q(node).property('imageDescription')}
    }
}

// Single integration component to render only an image.
// Expects that an image property is present on the node (image mixin is used)
prototype(MyVendor.AwesomeNeosProject:Content.Image.Only) < prototype(Neos.Fusion:Component) {
    // default sizes, can be overwritten
    sizes = MyVendor.AwesomeNeosProject:Helper.ImageSizes {
        type = Neos.Fusion:Case {
            contentInFourColumn {
                condition = ${q(node).parents('[instanceof MyVendor.AwesomeNeosProject:Content.FourColumn]').get()}
                renderer = 'four-column'
            }
            contentInThreecolumn {
                condition = ${q(node).parents('[instanceof MyVendor.AwesomeNeosProject:Content.ThreeColumn]').get()}
                renderer = 'three-column'
            }
            contentInTwocolumn {
                condition = ${q(node).parents('[instanceof MyVendor.AwesomeNeosProject:Content.TwoColumn]').get()}
                renderer = 'two-column'
            }
            default {
                condition = true
                renderer = ''
            }
        }
    }
    // default classes, can be overwritten
    imgClasses = 'max-w-full h-auto'
    pictureClasses = 'inline-block h-full'

    renderer = MyVendor.AwesomeNeosProject:Component.Image.Only {
        imageSource = Sitegeist.Kaleidoscope:AssetImageSource {
            asset = ${q(node).property('image')}
        }
        imageUri = MyVendor.AwesomeNeosProject:Helper.ResourceUri {
            resource = ${q(node).property('image').resource}
        }
        fileExtension = ${q(node).property('image').resource.fileExtension}
        alternativeText = MyVendor.AwesomeNeosProject:Helper.ImageAltText {
            image = ${q(node).property('image')}
        }

        sizes = ${props.sizes}
        imgClasses = ${props.imgClasses}
        pictureClasses = ${props.pictureClasses}
    }
}
